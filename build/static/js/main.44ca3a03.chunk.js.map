{"version":3,"sources":["Proxy.ts","eventProducer.ts","TextInput.tsx","Login.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RigthPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","sendPacket","type","email","password","displayName","staySignedIn","e","p","JSON","parse","data","console","log","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","listener","obj","splice","findIndex","Error","filter","args","call","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","TextInputAndButton","textInput","React","createRef","onClick","current","ref","buttonContent","Login","register","src","width","key","href","preventDefault","ConversationCard","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleDateString","content","m","forceUpdate","removeAllEventListener","LeftPane","user","tag","text","sendContactRequest","map","selectedConversation","firstMessage","c","MessageCard","own","toLocaleTimeString","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","showLogin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.44ca3a03.chunk.js","sourcesContent":["import {InboxDto, IncomingPacket, OutgoingPacket, MessageDto} from './chat';\r\nimport { EventProducer } from './eventProducer';\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap>\r\n{\r\n    private ws: WebSocket;\r\n    inbox: InboxDto | null = null;\r\n    constructor()\r\n    {\r\n        super()\r\n        this.ws = new WebSocket( \"wss://raja.aut.bme.hu/chat/\" );\r\n        this.ws.addEventListener( \"open\", () => \r\n        {\r\n            this.sendPacket({type: \"register\", email: \"buruska9723@gmail.com\", password: \"nyilvanasajatpasswordom\", displayName: \"GodComplex\", staySignedIn: false});\r\n        });\r\n        this.ws.addEventListener( \"message\", e =>\r\n        {\r\n            let p = <IncomingPacket>JSON.parse( e.data );\r\n            console.log(p)\r\n            switch ( p.type )\r\n            {\r\n            case \"error\":\r\n                alert( p.message );\r\n                break;\r\n            case \"login\":\r\n                this.inbox = p.inbox;\r\n                this.dispatch(\"login\");\r\n                break;\r\n            case \"message\":\r\n                let cid = p.channelId;\r\n                this.inbox!.conversations.find( x => x.channelId === cid )?.lastMessages.push( p.message );\r\n                this.dispatch(\"message\", cid, p.message)\r\n                break;\r\n            case \"conversationAdded\":\r\n                this.inbox!.conversations.push( p.conversation );\r\n                this.dispatch(\"conversation\", p.conversation.channelId);\r\n                break;\r\n            }\r\n        });\r\n    }\r\n    sendPacket(packet: OutgoingPacket)\r\n    {\r\n        this.ws.send(JSON.stringify(packet));\r\n    }\r\n}\r\n\r\n\r\nexport var proxy = new Proxy();\r\n\r\ninterface ProxyEventMap\r\n{\r\n    \"login\": () => void;\r\n    \"message\": ( channelId: string, message: MessageDto ) => void;\r\n    \"conversation\": ( channelId: string ) => void;\r\n}","export class EventProducer<M>\r\n{\r\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\r\n    addEventListener<K extends keyof M>( type: K, listener: M[K], obj?: Object )\r\n    {\r\n        this.listeners.push( { type, listener, obj } );\r\n    }\r\n    removeEventListener<K extends keyof M>( type: K, listener: M[K])\r\n    {\r\n        this.listeners.splice( this.listeners.findIndex( x => x.type === type && x.listener === listener ), 1 );\r\n    }\r\n    removeAllEventListener( obj: Object )\r\n    {\r\n        if ( !obj )\r\n            throw new Error( \"Must specify object\" );\r\n        this.listeners = this.listeners.filter( x => x.obj !== obj );\r\n    }\r\n    protected dispatch<K extends keyof M>( type: K, ...args )\r\n    {\r\n        for ( let listener of this.listeners.filter( x => x.type === type ) )\r\n            listener.listener.call( listener.obj, ...args );\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nexport interface TextInputOptions\r\n{\r\n    value?: string;\r\n    onChange?: ( value: string ) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n};\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions\r\n{\r\n    buttonContent?: string;\r\n    onClick?: ( text: string ) => boolean | void;\r\n}\r\n\r\n\r\nexport class TextInput extends Component<TextInputOptions>\r\n{\r\n    state = { value: this.props.value, focus: false };\r\n    render()\r\n    {\r\n        let attrs = {} as any;\r\n        if ( this.props.autofocus )\r\n            attrs.autoFocus = true;\r\n        if ( this.props.onEnter )\r\n            attrs.onKeyDown = e =>\r\n            {\r\n                if ( e.keyCode === 13 )\r\n                    this.props.onEnter!();\r\n            };\r\n\r\n        return (\r\n            <div className=\"text-input\">\r\n                <input\r\n                    type={ this.props.type ?? \"text\" } \r\n                    value={ this.state.value }\r\n                    onChange={ e =>\r\n                    {\r\n                        this.setState( { value: e.target.value } );\r\n                        this.props.onChange?.( e.target.value );\r\n                    } }\r\n                    onBlur={ () => this.setState( { focus: false } ) }\r\n                    onFocus={ () => this.setState( { focus: true } ) }\r\n                    { ...attrs }/>\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={ this.state.value || this.state.focus ? \"subsided\" : \"\" }>\r\n                    { this.props.placeholder }\r\n                </label>\r\n            </div> );\r\n    }\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n    onClick()\r\n    {\r\n        if ( this.props.onClick?.( this.textInput.current?.state.value ?? \"\" ) )\r\n            this.textInput.current?.setState( { value: \"\" } );\r\n    }\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput { ...this.props } ref={this.textInput} onEnter={ () => this.onClick() } />\r\n                <button type=\"button\" onClick={ () => this.onClick() }>\r\n                    { this.props.buttonContent }\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {proxy} from './Proxy'\r\nimport { TextInput } from './TextInput';\r\n\r\nexport class Login extends Component\r\n{\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n    render()\r\n    {\r\n        return (\r\n        <div className=\"login\">\r\n        <img src=\"logo512.png\" width=\"256\" />\r\n        <TextInput\r\n            type=\"email\" \r\n            placeholder=\"Email (someone@example.com)\" \r\n            value = {this.state.email}\r\n            onChange= { e => \r\n            {\r\n                if (this.state.register && e == \"N1RQT2\")\r\n                {\r\n                    this.setState( state => ({displayName: \"Endre\"}))\r\n                }\r\n                this.setState({email: e})}\r\n            }\r\n            onEnter= {() =>this.onClick()}\r\n            autofocus = {true}/>\r\n        { this.state.register &&\r\n            <TextInput \r\n                key={ this.state.displayName }\r\n                type=\"text\" \r\n                placeholder=\"Display Name (Agent Smith)\" \r\n                value={this.state.displayName}\r\n                onChange={ e => this.setState( {displayName: e} ) } \r\n                onEnter= {() =>this.onClick()}/> }\r\n        <TextInput\r\n            type=\"password\" \r\n            placeholder=\"Password\" \r\n            value = {this.state.password}\r\n            onChange= { e => this.setState({password: e})}\r\n            onEnter= {() =>this.onClick()}/>\r\n        <button \r\n            type=\"button\"\r\n            onClick= { () => this.onClick()}>\r\n            { this.state.register ? \"Register\" : \"Login\" }\r\n        </button>\r\n        <p>{ this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \" }\r\n            <a href=\"\" onClick={ e =>\r\n                {\r\n                e.preventDefault();\r\n                if(this.state.register)\r\n                    this.setState( {register: false} ); // pass a function instead of object\r\n                else\r\n                    this.setState( {register: true} );\r\n                }}>\r\n                { this.state.register ? \"Login\" : \"Register\" }\r\n            </a>\r\n        </p>\r\n        <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n        </div> );\r\n    }\r\n\r\n    onClick()\r\n    {\r\n        if ( this.state.register )\r\n            proxy.sendPacket( \r\n            { \r\n                type: \"register\", \r\n                email: this.state.email, \r\n                password: this.state.password,\r\n                displayName: this.state.displayName,\r\n                staySignedIn: false \r\n            });\r\n        else\r\n            proxy.sendPacket( \r\n            { \r\n                type: \"login\", \r\n                email: this.state.email, \r\n                password: this.state.password,\r\n                staySignedIn: false \r\n            });\r\n\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { ConversationDto } from \"./chat.d\";\r\nimport { proxy } from \"./Proxy\";\r\n\r\nexport class ConversationCard extends Component<{\r\n    conversation: ConversationDto,\r\n    selected: boolean,\r\n    onSelect: () => void\r\n}>\r\n{\r\n    render()\r\n    {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n        this.props.conversation.lastMessages[ this.props.conversation.lastMessages.length - 1 ] : null;\r\n        return (\r\n            <div \r\n                className={ \"conversation-card\" + ( this.props.selected ? \" selected\" : \"\" ) }\r\n                onClick={ () => this.props.onSelect() }>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{ this.props.conversation.name }</span>\r\n                    <span className=\"time\">\r\n                    { lastMessage && new Date( lastMessage.timeStamp ).toLocaleDateString() }\r\n                    </span>\r\n                </div>\r\n                <span className=\"last-message\">{ lastMessage?.content }</span>\r\n            </div>\r\n        );\r\n    }\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener( \"message\", ( cid, m ) =>\r\n        {\r\n            if ( cid === this.props.conversation.channelId )\r\n                this.forceUpdate();\r\n        }, this );\r\n    }\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener( this );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { InboxDto, ConversationDto } from \"./chat.d\";\r\nimport { TextInputAndButton } from \"./TextInput\";\r\nimport {proxy} from \"./Proxy\"\r\nimport { ConversationCard } from \"./ConversationCard\";\r\n\r\nexport class LeftPane extends Component<{\r\n    inbox: InboxDto, \r\n    selectedConversation: ConversationDto | undefined,\r\n    onSelect: ( c: ConversationDto ) => void\r\n}>\r\n{\r\n    render()\r\n    {\r\n        return (\r\n        <div className=\"left-pane\">\r\n            <p className=\"my-tag\">My tag: { this.props.inbox.user.tag }</p>\r\n            <TextInputAndButton \r\n                type=\"text\" \r\n                placeholder=\"Add user by Tag (Name#123)\"\r\n                buttonContent=\"Inv\"\r\n                onClick={ text => this.sendContactRequest( text ) } />\r\n            <div className=\"conversations\">\r\n                { this.props.inbox.conversations.map( x =>\r\n                <ConversationCard\r\n                    key={ x.channelId }\r\n                    conversation={ x }\r\n                    selected={ x === this.props.selectedConversation }\r\n                    onSelect={ () => this.props.onSelect( x ) } /> ) }\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n    sendContactRequest( email: string )\r\n    {\r\n        proxy.sendPacket( { type: \"contactRequest\", email, firstMessage: \"Hello\" } );\r\n        return true;\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener( \"conversation\", c => this.forceUpdate(), this );\r\n    }\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener( this );\r\n    }\r\n\r\n}","import React, { PureComponent } from \"react\";\r\nimport { MessageDto } from \"./chat.d\";\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <div className={ \"message-card\" + ( this.props.own ? \" own\" : \"\" ) }>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{ this.props.message.content }</span>\r\n                    <span className=\"time\">\r\n                    { new Date( this.props.message.timeStamp ).toLocaleTimeString() }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { ConversationDto } from \"./chat.d\";\r\nimport { proxy } from \"./Proxy\";\r\nimport { TextInputAndButton } from \"./TextInput\";\r\nimport { MessageCard } from \"./MessageCard\";\r\n\r\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\r\n{\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener( \"message\", ( cid, m ) =>\r\n        {\r\n            if ( cid === this.props.conversation?.channelId )\r\n            this.forceUpdate();\r\n        }, this );\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n    onSend(text: string)\r\n    {\r\n        proxy.sendPacket({\r\n            type: \"message\",\r\n            channelId: this.props.conversation!.channelId, \r\n            referenceTo: 0,\r\n            contentType: 0,\r\n            content: \"N: \" + text\r\n        })\r\n    }\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"right-pane column\">\r\n                { this.props.conversation &&\r\n                <>\r\n                    <div className=\"conversation-header\">\r\n                        <button \r\n                            type=\"button\" \r\n                            className=\"only-narrow\"\r\n                            onClick={ () => this.props.onBack() }>\r\n                                Back\r\n                        </button>\r\n                        <p>{ this.props.conversation?.name }</p>\r\n                    </div>\r\n                    <div className=\"messages\">\r\n                        { this.props.conversation?.lastMessages.map( x =>\r\n                        <MessageCard key={ x.id } message={ x }\r\n                        own={ x.senderId === proxy.inbox?.user.id } /> ) }\r\n                    </div>\r\n                    <div className=\"send-message row\">\r\n                        <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\r\n                        buttonContent=\"Send\" onClick={ x => this.onSend( x ) } />\r\n                    </div>\r\n                </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport { proxy } from \"./Proxy\"\r\nimport { LeftPane } from \"./LeftPane\";\r\nimport { RightPane } from \"./RigthPane\";\r\n\r\nexport class Main extends Component\r\n{\r\n    state = { selectedConversation: undefined as ( ConversationDto | undefined ) };\r\n    render()\r\n    {\r\n        let className = \"main row \" + ( this.state.selectedConversation ? \"right\" : \"left\" );\r\n        return (\r\n            <div className={ className }>\r\n                <LeftPane\r\n                    inbox={ proxy.inbox! }\r\n                    selectedConversation={ this.state.selectedConversation }\r\n                    onSelect={ c => this.setState( { selectedConversation: c } ) } />\r\n                <RightPane \r\n                    conversation={ this.state.selectedConversation }\r\n                    onBack={ () => this.setState( { selectedConversation: undefined } ) } />\r\n            </div>\r\n            );\r\n\r\n    }\r\n}\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport {Login} from './Login'\nimport {proxy} from './Proxy'\nimport {Main} from './Main'\n\nexport default class App extends Component\n{\n  state = { showLogin: true };\n  render()\n  {\n    return (\n    <div className=\"app\">\n    { this.state.showLogin ? <Login /> : <Main /> }\n    </div>\n    );\n  }\n  \n  componentDidMount()\n  {\n    proxy.addEventListener( \"login\", () => this.setState( { showLogin: false } ) );\n  }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}